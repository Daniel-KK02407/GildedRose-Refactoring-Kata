on: pull_request_target

jobs:
  comment_pr:
    runs-on: ubuntu-latest
    name: comment a PR
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            辛苦你參與本次的練習。首先參觀看看其他夥伴們的成果吧，有沒有你認識的朋友或是熟悉的語言呢？
            和別人相比，你的程式碼有沒有明顯的好或壞？

            雖然說能正確執行、能賺錢的 code 都是好 code，但很明顯還是有好不好閱讀和維護的差別吧？
            接著我們來看看 Sandi Metz 2014 在 RailsConf 的 [分享](https://www.youtube.com/watch?v=8bZh5LMaSmE)

            ---

            這個影片著實讓我獲益良多，反覆看了很多次後再重新捲起袖子練習一次，簡易感想如下：
            1. 一定很害怕要接手維護 legacy code 吧？改 A 壞 B 怎麼辦？
            2. 有寫測試才敢安心重構
            3. 測試要有被執行才可信任 (CI 不能停)
            4. 只要測試可信任，legacy code 裡面複雜的邏輯都不用看也可以開始重構
            5. 錯誤的抽象比重複更可怕
            6. SOLID 裡面的 `O`，開放封閉原則說的 `對擴展開放，對修改封閉` 是什麼意思？難道要處理 bug 也不能修改嗎？做到開放封閉會怎樣做不到又會怎樣？
            7. 如何透過設計，在有限範圍內擴展預期的需求？
            8. 如果一個需求擴展的 pr 發出來全都是綠色 (add) 的新檔案，完全沒有紅色 (delete/modify)，有可能會改 A 壞 B 嗎？
            9. 每個 class 的邏輯一目了然、且單一職責

            ---

            今天練習的程式碼一定不陌生，這類程式碼被列成經典的重構案例已經行之有年了
            但我相信在我們維護的專案中還是會看到，也許我們才剛 merge 了一段進 master 也不一定

            在完成需求之餘也需追求可讀性、可維護性
            試著用自己的話語來闡述 SOLID 原則，拿自己的實作對照經典教條找出可優化之處

            理論結合實作是做的到的！和夥伴們一同切磋努力！
